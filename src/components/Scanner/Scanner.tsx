import React, { useState, useEffect } from 'react';
import { ScanResult, ScanConfig } from '../../types/scanner';
import { checkXSSVulnerability, checkSQLInjection, checkSecurityHeaders } from '../../utils/scannerUtils';
import { isValidUrl, sanitizeUrl } from '../../utils/validationUtils';
import ScanResults from '../ScanResults';
import ScanButton from '../ScanButton';
import ScanOptions from '../ScanOptions';
import AnimatedCard from '../AnimatedCard';

const Scanner = () => {
  const [url, setUrl] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [config, setConfig] = useState<ScanConfig>({
    url: '',
    checkXSS: true,
    checkSQLi: true,
    checkHeaders: true,
  });
  const [results, setResults] = useState<ScanResult[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    if (!isScanning) {
      setProgress(0);
      setError(null);
    }
  }, [isScanning]);

  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUrl(e.target.value);
    setError(null);
  };

  const handleScan = async () => {
    const sanitizedUrl = sanitizeUrl(url);
    if (!isValidUrl(sanitizedUrl)) {
      setError('Please enter a valid URL');
      return;
    }

    setIsScanning(true);
    setError(null);
    setResults([]);
    const allResults: ScanResult[] = [];
    let completedChecks = 0;
    const totalChecks = Object.values(config).filter(Boolean).length - 1;

    try {
      if (config.checkXSS) {
        const xssResults = await checkXSSVulnerability(sanitizedUrl);
        allResults.push(...xssResults);
        completedChecks++;
        setProgress((completedChecks / totalChecks) * 100);
      }

      if (config.checkSQLi) {
        const sqlResults = await checkSQLInjection(sanitizedUrl);
        allResults.push(...sqlResults);
        completedChecks++;
        setProgress((completedChecks / totalChecks) * 100);
      }

      if (config.checkHeaders) {
        const headerResults = await checkSecurityHeaders(sanitizedUrl);
        allResults.push(...headerResults);
        completedChecks++;
        setProgress((completedChecks / totalChecks) * 100);
      }

      setResults(allResults);
    } catch (error) {
      if (error instanceof Error) {
        setError(`Scan failed: ${error.message}`);
      } else {
        setError('An unexpected error occurred during the scan');
      }
    } finally {
      setIsScanning(false);
    }
  };

  return (
    <section id="scanner" className="py-16">
      <div className="max-w-4xl mx-auto px-4">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            Start Your Security Scan
          </h2>
          <p className="text-xl text-gray-600">
            Enter your website URL and customize your scan options below.
          </p>
        </div>

        <AnimatedCard className="mb-8 p-6">
          <div className="mb-6">
            <label htmlFor="url" className="block text-sm font-medium text-gray-700 mb-2">
              Target URL
            </label>
            <input
              type="url"
              id="url"
              value={url}
              onChange={handleUrlChange}
              placeholder="https://example.com"
              className={`
                w-full px-4 py-3 border rounded-lg
                focus:ring-2 focus:ring-blue-500 focus:border-transparent
                transition-all duration-200
                ${error ? 'border-red-500' : 'border-gray-300'}
              `}
            />
            {error && (
              <p className="mt-2 text-sm text-red-600">{error}</p>
            )}
          </div>

          <div className="mb-6">
            <ScanOptions config={config} onChange={setConfig} />
          </div>

          <ScanButton
            isScanning={isScanning}
            disabled={!url || isScanning}
            onClick={handleScan}
            progress={progress}
          />
        </AnimatedCard>

        <AnimatedCard>
          <ScanResults results={results} isLoading={isScanning} />
        </AnimatedCard>
      </div>
    </section>
  );
};

export default Scanner;